#!/usr/bin/env node

/**
 * Security Key Generator for Universal Payment Protocol
 * Generates cryptographically secure keys for production deployment
 */

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

console.log('üîê Universal Payment Protocol - Security Key Generator\n');

// Generate secure keys
const generateSecureKey = (length = 32) => {
  return crypto.randomBytes(length).toString('hex');
};

const generateAPIKey = () => {
  return `upp_${crypto.randomBytes(32).toString('hex')}`;
};

const generateJWTSecret = () => {
  return crypto.randomBytes(64).toString('hex');
};

// Generate all required keys
const securityKeys = {
  JWT_SECRET: generateJWTSecret(),
  API_KEY_SECRET: generateSecureKey(16),
  ENCRYPTION_KEY: generateSecureKey(32),
  UPP_API_KEY: generateAPIKey(),
  SESSION_SECRET: generateSecureKey(32),
};

console.log('‚úÖ Generated secure keys:');
console.log('========================\n');

// Display keys with secure handling instructions
Object.entries(securityKeys).forEach(([key, value]) => {
  console.log(`${key}=${value}`);
});

console.log('\nüîí SECURITY INSTRUCTIONS:\n');
console.log('1. ‚ö†Ô∏è  NEVER commit these keys to version control');
console.log('2. üîê Store these keys in your .env file');
console.log('3. üè≠ Use different keys for each environment (dev/staging/prod)');
console.log('4. üîÑ Rotate keys regularly in production');
console.log('5. üõ°Ô∏è  Use environment variables or secrets management in production');

console.log('\nüìù Next Steps:\n');
console.log('1. Copy the keys above to your .env file');
console.log('2. Set your Stripe API keys from https://dashboard.stripe.com/apikeys');
console.log('3. Configure CORS_ORIGINS for your domain');
console.log('4. Review all security settings before production deployment');

// Optionally write to .env file
const envPath = path.join(__dirname, '..', '.env');

if (process.argv.includes('--write-env')) {
  try {
    let envContent = '';
    
    // Read existing .env.example as template
    const examplePath = path.join(__dirname, '..', '.env.example');
    if (fs.existsSync(examplePath)) {
      envContent = fs.readFileSync(examplePath, 'utf8');
      
      // Replace placeholder values with generated keys
      Object.entries(securityKeys).forEach(([key, value]) => {
        const regex = new RegExp(`${key}=.*`, 'g');
        envContent = envContent.replace(regex, `${key}=${value}`);
      });
    } else {
      // Create basic .env content
      envContent = `# Generated by UPP Security Key Generator
# ${new Date().toISOString()}

NODE_ENV=development
PORT=3000
FRONTEND_URL=http://localhost:3000

# Stripe Configuration (REQUIRED - set your own values)
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here

# Generated Security Keys
${Object.entries(securityKeys).map(([key, value]) => `${key}=${value}`).join('\n')}

# CORS Configuration
CORS_ORIGINS=http://localhost:3000,http://localhost:3001

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
`;
    }
    
    if (fs.existsSync(envPath)) {
      console.log('\n‚ö†Ô∏è  .env file already exists!');
      console.log('   Run with --force-overwrite to replace it');
      
      if (process.argv.includes('--force-overwrite')) {
        fs.writeFileSync(envPath, envContent);
        console.log('‚úÖ .env file updated with new security keys');
      }
    } else {
      fs.writeFileSync(envPath, envContent);
      console.log('\n‚úÖ .env file created with generated keys');
    }
  } catch (error) {
    console.error('\n‚ùå Error writing .env file:', error.message);
  }
}

// Security validation
console.log('\nüîç Security Validation:\n');

// Validate key strengths
const validateKey = (name, key, minLength) => {
  if (key.length >= minLength) {
    console.log(`‚úÖ ${name}: Strong (${key.length} characters)`);
  } else {
    console.log(`‚ùå ${name}: Weak (${key.length} characters, minimum ${minLength})`);
  }
};

validateKey('JWT_SECRET', securityKeys.JWT_SECRET, 64);
validateKey('ENCRYPTION_KEY', securityKeys.ENCRYPTION_KEY, 64);
validateKey('API_KEY_SECRET', securityKeys.API_KEY_SECRET, 32);
validateKey('UPP_API_KEY', securityKeys.UPP_API_KEY, 40);

console.log('\nüõ°Ô∏è  Additional Security Recommendations:\n');
console.log('‚Ä¢ Enable 2FA on your Stripe account');
console.log('‚Ä¢ Use HTTPS in production (never HTTP)');
console.log('‚Ä¢ Set up proper CORS origins');
console.log('‚Ä¢ Monitor API usage and set up alerts');
console.log('‚Ä¢ Regularly audit access logs');
console.log('‚Ä¢ Use a secrets management service in production');
console.log('‚Ä¢ Set up proper backup and recovery procedures');

if (!process.argv.includes('--write-env')) {
  console.log('\nüí° Tip: Run with --write-env to automatically create/update .env file');
}